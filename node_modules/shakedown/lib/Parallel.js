export default class Parallel {
    constructor() {
        this.callbacks = [];
        this.results = [];
        this.waiting = 0;
    }

    add() {
        this.waiting++;
        var args = [];
        this.results.push(args);
        return function(){
            for (var i in arguments) args.push(arguments[i])
            this.waiting--;
            if (this.waiting == 0) this.resolve()
        }.bind(this)
    }

    then(callback) {
        this.callbacks.push(callback);
        if (this.waiting == 0) this.resolve()
    }

    resolve() {
        var err;

        this.results = this.results.map(function(args){
            if (args[0]) err = args[0]
            args.shift();
            if (args.length == 0) return null;
            if (args.length == 1) return args[0];
            return args;
        })
        if (err) this.results.unshift(err);
        else this.results.unshift(null);

        this.callbacks.forEach(function(callback){
            callback.apply(null, this.results)
        }.bind(this))
    }
}
