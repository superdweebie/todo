import callbackAngel from 'up/callbackAngel';
import loadConfig from 'up/server/loadConfig';
import startFrisk from 'up/frisk/startFrisk';
import startMongo from 'up/mongo/startMongo';
import loop from 'up/loop';

var cluster = System.require('cluster');
var cpus = System.require('os').cpus().length;

var start = () => {
    try {
        callbackAngel(function* (){

            console.log('Loading config');
            var config = yield loadConfig();

            yield startMongo(config.mongo);

            var frisk = startFrisk({frisk: config.frisk, bundles: config.bundles});

            cluster.setupMaster({exec: System.locate({name: 'up/_es6ify'})});

            var startWorker = (callback) => {
                console.log('Starting worker thread ...');
                var worker = cluster.fork();
                worker.on('message', (message) => {
                    if (message.cmd == 'ready') callback(worker)
                });
                worker.send({
                    mid: 'up/server/serverWorker',
                    config: config,
                    message: {
                        cmd: 'config',
                        message: {
                            port: config.port,
                            host: config.host,
                            bundles: config.bundles
                        }
                    }
                });
            };

            yield loop(cpus, () => {return startWorker});
            console.log(`${cpus} worker threads started.`);

            cluster.on('death', (worker) => {
                // Log deaths!
                console.log(`Worker thread ${worker.pid} died.`);

                // If autoRestart is true, spin up another to replace it
                if (config.autorestart) startWorker(() => {console.log('Worker thread restarted.')})
            });

            console.log(`${config.name} ready to recive requests at http://${config.host}:${config.port}`);
        });
    } catch (err) {
        console.log(err);
    }
}

export {start};